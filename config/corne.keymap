/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  Ã‘  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  -  | SHFT  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T    &kp Y      &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_SHIFT    &kp A  &kp S  &kp D     &kp F  &kp G    &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C     &kp V  &kp B    &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                                &kp LGUI  &mo 2  &mo 3    &kp SPACE  &mo 1  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCL    &kp AT      &kp HASH    &kp DLLR      &kp PRCNT          &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans      &trans      &trans      &trans        &trans             &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &bl BL_TOG  &bl BL_INC  &bl BL_DEC  &bl BL_CYCLE  &rgb_ug RGB_TOG    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &mo 5
                                   &kp LGUI    &trans        &kp SPACE          &kp RET    &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp ESCAPE   &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans  &trans    &trans  &trans           &trans    &kp QUESTION   &trans  &trans
&kp LA(TAB)  &trans      &trans             &trans           &trans  &trans    &trans  &kp PRINTSCREEN  &kp HOME  &kp PAGE_UP    &trans  &kp ENTER
&trans       &trans      &trans             &trans           &trans  &trans    &trans  &kp INSERT       &kp END   &kp PAGE_DOWN  &trans  &trans
                                            &trans           &trans  &trans    &trans  &trans           &trans
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp DELETE
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &kp ENTER
&kp LSHFT   &trans        &trans        &trans        &trans        &out OUT_TOG    &trans    &trans    &trans    &trans     &trans  &tog 4
                                        &kp LGUI      &trans        &trans          &kp RET   &trans    &kp RALT
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp ASTERISK   &kp N7           &kp N8  &kp N9  &kp MINUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_DIVIDE  &kp N4           &kp N5  &kp N6  &kp RBKT   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_EQUAL   &kp NUMBER_1     &kp N2  &kp N3  &trans     &trans
                        &trans  &trans  &trans    &kp SPACE      &kp KP_NUMBER_0  &tog 4
            >;
        };

        functions {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans   &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
